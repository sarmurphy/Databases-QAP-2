Sarah Murphy
Database Programming - QAP 2
Due February 10, 2025

Creating Tables:

CREATE TABLE products (
	id SERIAL PRIMARY KEY,
	product_name TEXT,
	price DECIMAL(8, 2),
	stock_quantity INT
);

CREATE TABLE customers (
	id SERIAL PRIMARY KEY,
	first_name TEXT,
	last_name TEXT,
	email TEXT
);

CREATE TABLE orders (
	id SERIAL PRIMARY KEY,
	customer_id INT REFERENCES customers(id),
	order_date DATE
);

CREATE TABLE order_items (
	order_id INT REFERENCES orders(id),
	product_id INT REFERENCES products(id),
	quantity INT,
	PRIMARY KEY (order_id, product_id)
);

Inserting Product Information:

INSERT INTO products (product_name, price, stock_quantity) VALUES
('Jeans', '59', 12),
('Sweater', '44', 8),
('Shirt', '22', 15),
('Socks', '4', 9),
('Sneakers', '99', 7);

Inserting Customer Information:

INSERT INTO customers (first_name, last_name, email) VALUES
('John', 'Doe', 'john.doe@example.com'),
('Jane', 'Smith', 'jane.smith@example.com'),
('Chloe', 'Baker', 'chloe.baker@example.com'),
('Sarah', 'Murphy', 'sarah.murphy@example.com'),
('Matt', 'Mills', 'matt.mills@example.com');

Inserting Order Information:

INSERT INTO orders (customer_id, order_date) VALUES
('1', '2025-01-27'),
('2', '2025-01-28'),
('3', '2025-02-01'),
('4', '2025-02-02'),
('5', '2025-02-04');

Inserting Order Items Information:

INSERT INTO order_items (order_id, product_id, quantity) VALUES
('1', '1', '1'),
('1', '3', '2'),
('2', '4', '4'),
('2', '5', '1'),
('3', '2', '3'),
('3', '1', '2'),
('4', '4', '2'),
('4', '3', '1'),
('5', '2', '1'),
('5', '5', '2');

Retrieving Product Names and Stock Quantity:

SELECT product_name, stock_quantity FROM products;

Retrieving Product Names and Quantity from Orders Placed:

SELECT products.product_name, order_items.quantity
FROM order_items
INNER JOIN products ON order_items.product_id = products.id
WHERE order_items.order_id = 5;

Retrieving All Orders for a Specfic Customer:

SELECT orders.id, order_items.product_id, order_items.quantity
FROM orders
INNER JOIN order_items ON orders.id = order_items.order_id
WHERE orders.customer_id = 3;

Reducing Stock Quantities when a Customer Makes an Order:
(Reducing stock of order_id 1, consists of one pair of jeans and two shirts, items in the table go from original number of 12 to 11 (jeans), and 15 to 13 (shirts))

UPDATE products
SET stock_quantity = stock_quantity - (SELECT quantity FROM order_items 
WHERE order_id = 1 AND product_id = products.id)
WHERE id IN (SELECT product_id FROM order_items WHERE order_id = 1);
SELECT * FROM products;


Removing an Order and Associated Items:

DELETE FROM order_items WHERE order_id = 2;
DELETE FROM orders WHERE id = 2;